{"version":3,"sources":["services.ts","TableCalls.tsx","TableStats.tsx","TableApps.tsx","customer.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["services","fetch","then","res","json","data","console","log","catch","error","customerId","name","hasSupportContract","description","headers","method","body","JSON","stringify","id","application","status","TableComponent","props","React","setData","initialState","isToggled","setIsToggled","state","useToggle","showData","setshowData","UpdateDataRow","newData","a","loadData","getCustomerCalls","Customer","response","dataSet","forEach","element","push","useEffect","className","title","options","pageSize","columns","field","editable","onRowUpdate","oldData","Promise","resolve","reject","setTimeout","dataUpdate","tableData","StatsTableComponent","getCustomerStats","openCallsTotal","openCalls","totalCalls","openCallsresponded","responded","openCallsawaitingResponse","awaitingResponse","closedCallsTotal","closedCalls","closedCallssatisfactory","satisfactory","closedCallsunsatisfactory","unsatisfactory","month1","lastThreeMonths","month2","month3","AppsTableComponent","AddDataRow","desc","updateCustomerApps","getCustomerApps","date","Date","installationDate","toLocaleDateString","onRowAdd","CustomerComponent","showData2","showData3","handleClick","bind","handleClick2","handleClick3","e","preventDefault","this","setState","prevState","Typography","variant","component","Button","color","onClick","App","Customers","getAllCustomers","map","item","index","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.302f63fc.chunk.js","sourcesContent":["import fetchJsonp from \"fetch-jsonp\";\r\nimport { Customer, Status, Call, Stats, Application } from \"./objects\";\r\n\r\nexport class services {\r\n  public async getAllCustomers(): Promise<any> {\r\n    let data;\r\n    let test;\r\n\r\n    //\r\n\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Customer\"\r\n      // \"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n      //   headers: {\r\n      //     \"Access-Control-Allow-Origin\": '*',\r\n      //    \"Content-Type\": \"application/json\"\r\n      //    }\r\n      // }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  public async getCustomer(customerId?: string): Promise<any> {\r\n    await fetch(\r\n      \"https://techtestcalllogapi.azurewebsites.net/api/Customer/\" + customerId\r\n      //   { mode: \"no-cors\" }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    return;\r\n  }\r\n\r\n  public async getCustomerCalls(customerId?: string): Promise<any> {\r\n    let data;\r\n    let test;\r\n    //\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Call/customer/\" + customerId\r\n      // \"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n      //   headers: {\r\n      //     \"Access-Control-Allow-Origin\": '*',\r\n      //    \"Content-Type\": \"application/json\"\r\n      //    }\r\n      // }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  public async getCustomerStats(customerId?: string): Promise<any> {\r\n    let data;\r\n    let test;\r\n    //\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Statistics/\" + customerId\r\n      // \"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n      //   headers: {\r\n      //     \"Access-Control-Allow-Origin\": '*',\r\n      //    \"Content-Type\": \"application/json\"\r\n      //    }\r\n      // }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  public async getCustomerApps(customerId?: string): Promise<any> {\r\n    let data;\r\n    let test;\r\n    //\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Application/customer/\" + customerId\r\n      // \"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n      //   headers: {\r\n      //     \"Access-Control-Allow-Origin\": '*',\r\n      //    \"Content-Type\": \"application/json\"\r\n      //    }\r\n      // }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n  public async updateCustomerApps(name?: string, hasSupportContract?: string, description?: string ,customerId?: string): Promise<any> {\r\n    \r\n    let test;\r\n    //\r\n\r\n\r\n    let data ={\r\n      \"name\": name,\r\n      \"description\": description,\r\n      \"hasSupportContract\": hasSupportContract,\r\n      \"customerId\": customerId\r\n    }\r\n\r\n\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Application/customer/\" + customerId,\r\n      {\r\n      //\"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n         },\r\n         method: 'patch',                                                              \r\n         body: JSON.stringify(  data )  \r\n        },\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  public async UpdateCall(data: any): Promise<any> {\r\n    let id = data.id;\r\n    let app = data.application;\r\n    let desc = data.description;\r\n    let status = data.status;\r\n\r\n    return await fetch(\r\n      \"http://localhost:8010/proxy/api/Call/customer/\" + id\r\n      // \"https://techtestcalllogapi.azurewebsites.net/api/Customer\"\r\n      //,  { mode: \"cors\" }\r\n      //   headers: {\r\n      //     \"Access-Control-Allow-Origin\": '*',\r\n      //    \"Content-Type\": \"application/json\"\r\n      //    }\r\n      // }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"ðŸš€ ~ data\", data);\r\n\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n}\r\n","import MaterialTable from \"material-table\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport * as React from \"react\";\r\nimport styles from \"./Component.module.scss\";\r\nimport { Customer, Status, Call, Stats, Application } from \"./objects\";\r\nimport { services } from \"./services\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\n\r\nexport interface ITableComponentProps { \r\n  Customer: Customer;\r\n  data?: any;\r\n  \r\n}\r\n\r\n\r\n\r\nexport const TableComponent: React.FunctionComponent<ITableComponentProps> = (props: React.PropsWithChildren<ITableComponentProps>) => {\r\n  //const services = new services();\r\n\r\n  const [data, setData] = React.useState([]);\r\n\r\n  const useToggle = (initialState:any) => {\r\n    const [isToggled, setIsToggled] = React.useState(initialState);\r\n\r\n    // put [setIsToggled] into the useCallback's dependencies array\r\n    // this value never changes so the callback is not going to be ever re-created\r\n    const toggle = React.useCallback(() => setIsToggled((state:any) => !state), [\r\n      setIsToggled,\r\n    ]);\r\n\r\n    return [isToggled, toggle];\r\n  };\r\n  const [showData, setshowData] = useToggle(false);\r\n  //const presence = props.person.presence;\r\n\r\n  \r\n  const AddDataRow = async (newData:any) =>{\r\n\r\n    console.log(\"Adding\",newData);\r\n\r\n\r\n  }\r\n\r\n  const UpdateDataRow= async (newData:any) =>{\r\n\r\n    console.log(\"Updating\",newData)\r\n  }\r\n\r\n  const DeleteDataRow= async (newData:any) =>{\r\n\r\n    console.log(\"Updating\",newData)\r\n\r\n  }\r\n\r\n\r\n\r\n   const loadData = async () =>{\r\n    \r\n    await new services()\r\n      .getCustomerCalls(props.Customer.id)\r\n      .then((response:any) => {\r\n        console.log(\"ðŸš€ ~ response\", response);\r\n\r\n        let dataSet: any = [];\r\n\r\n        response.forEach((element: any) => {\r\n          dataSet.push({\r\n            id: element.id,\r\n            status: element.status.description,\r\n            application: element.application.name,\r\n            description: element.description,\r\n          });\r\n        });\r\n\r\n        setData(dataSet);\r\n        setshowData();\r\n      });\r\n  }\r\n\r\nuseEffect(() => {\r\n  \r\n  if(!showData)\r\n  loadData();\r\n\r\n},[showData]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n  {}\r\n        <div className={\"Tablehost\"}>\r\n          <MaterialTable\r\n            title={props.Customer.name + \" - Calls\"}\r\n            //icons={tableIcons}\r\n            options={{\r\n               // paging:false,\r\n                pageSize: 10,\r\n\r\n            }}\r\n            columns={[\r\n              { title: \"Call Id\", field: \"id\" },\r\n              { title: \"Status\", field: \"status\" },\r\n              { title: \"Application\", field: \"application\" },\r\n              { title: \"Description\", field: \"description\" },\r\n            ]}\r\n            data=\r\n            {data}\r\n            // {[\r\n            //   {\r\n            //     status: \"Mehmet\",\r\n            //     application: \"Baran\",\r\n            //     description: 1987,\r\n            //     birthCity: 63,\r\n            //   },\r\n            //   {\r\n            //     name: \"Zerya BetÃ¼l\",\r\n            //     surname: \"Baran\",\r\n            //     birthYear: 2017,\r\n            //     birthCity: 34,\r\n            //   },\r\n            // ]}\r\n            // actions={[\r\n\r\n            //   {\r\n            //     icon: 'edit',\r\n            //     tooltip: 'update status',\r\n            //     onClick: (event, rowData) => \r\n            //     new Promise((resolve, reject) => {\r\n            //           setTimeout(() => {\r\n            //             //const dataUpdate = [...data];\r\n            //             //const index = oldData.tableData.id;\r\n            //             //dataUpdate[index] = newData;\r\n            //             //setData([...dataUpdate]);\r\n            //             UpdateDataRow(rowData)\r\n    \r\n            //             resolve(true);\r\n            //           }, 1000);\r\n            //         }),\r\n                \r\n                \r\n            //   },\r\n\r\n            // ]}\r\n            editable={{\r\n              // onRowAdd: (newData) =>\r\n              //   new Promise((resolve, reject) => {\r\n              //     setTimeout(() => {\r\n              //        setData([...data, newData]);\r\n              //        AddDataRow(newData);\r\n              //        resolve(true);\r\n              //     }, 1000);\r\n              //   }),\r\n              onRowUpdate: (newData, oldData:any) =>\r\n                new Promise((resolve, reject) => {\r\n                  setTimeout(() => {\r\n                    const dataUpdate = [...data];\r\n                    const index = oldData.tableData.id;\r\n                    //dataUpdate[index] = newData;\r\n                    setData([...dataUpdate]);\r\n                    UpdateDataRow(newData);\r\n\r\n                    resolve(true);\r\n                  }, 1000);\r\n                }),\r\n              // onRowDelete: (someData) =>\r\n              //   new Promise((resolve, reject) => {\r\n              //     setTimeout(() => {\r\n              //       const dataDelete = [...data];\r\n              //       //const index = someData.tableData.id;\r\n              //       console.log('ðŸš€ ~ someData', someData);\r\n              //       DeleteDataRow(someData);\r\n                    \r\n              //       //dataDelete.splice(index, 1);\r\n              //       setData([...dataDelete]);\r\n              //       resolve(true)\r\n              //     }, 1000);\r\n              //   }),\r\n            }}\r\n          />\r\n        </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n// export default class CustomerComponent extends React.Component<\r\n//   ICustomerProps,\r\n//   ICustomerState\r\n// > {\r\n//   private services: services = new services();\r\n\r\n//   constructor(props: ICustomerProps, state: ICustomerState) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       showData: false,\r\n//     };\r\n\r\n//     this.handleClick = this.handleClick.bind(this);\r\n\r\n//     console.log(\"ðŸš€ ~  this.state\", this.state);\r\n//   }\r\n\r\n//   public async handleClick(e: any) {\r\n//     e.preventDefault();\r\n//     console.log(\"The link was clicked.\");\r\n\r\n//     await this.services\r\n//       .getCustomerCalls(this.props.Customer.id)\r\n//       .then((response) => {\r\n//         console.log(\"ðŸš€ ~ response\", response);\r\n\r\n//         let dataSet: any[] = [];\r\n\r\n//         response.forEach((element: any) => {\r\n//           dataSet.push({\r\n//             id: element.id,\r\n//             status: element.status.description,\r\n//             application: element.application.name,\r\n//             description: element.description,\r\n//           });\r\n//         });\r\n\r\n//         this.setState({\r\n//           data: dataSet,\r\n//         });\r\n//         this.setState((prevState) => ({\r\n//           showData: !prevState.showData,\r\n//         }));\r\n//         console.log(\"ðŸš€ ~ this.state\", this.state);\r\n//       });\r\n//   }\r\n\r\n//   Data = (isLoggedIn?: boolean) => {\r\n//     if (this.state.showData) {\r\n//       return (\r\n//         <div className={\"Tablehost\"}>\r\n//           <MaterialTable\r\n//             title={this.props.Customer.name}\r\n//             options={{\r\n//                 paging:false,\r\n//                 pageSize: 10,\r\n\r\n//             }}\r\n//             columns={[\r\n//               { title: \"Call Id\", field: \"id\" },\r\n//               { title: \"Status\", field: \"status\" },\r\n//               { title: \"Application\", field: \"application\" },\r\n//               { title: \"Description\", field: \"description\" },\r\n//             ]}\r\n//             data={this.state.data}\r\n//             // {[\r\n//             //   {\r\n//             //     status: \"Mehmet\",\r\n//             //     application: \"Baran\",\r\n//             //     description: 1987,\r\n//             //     birthCity: 63,\r\n//             //   },\r\n//             //   {\r\n//             //     name: \"Zerya BetÃ¼l\",\r\n//             //     surname: \"Baran\",\r\n//             //     birthYear: 2017,\r\n//             //     birthCity: 34,\r\n//             //   },\r\n//             // ]}\r\n//             editable={{\r\n//               onRowAdd: (newData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     // setData([...data, newData]);\r\n//                     // resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowUpdate: (newData, oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataUpdate = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataUpdate[index] = newData;\r\n//                     //setData([...dataUpdate]);\r\n//                     //resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowDelete: (oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataDelete = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataDelete.splice(index, 1);\r\n//                     //setData([...dataDelete]);\r\n//                     //resolve()\r\n//                   }, 1000);\r\n//                 }),\r\n//             }}\r\n//           />\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   public render(): React.ReactElement<ICustomerProps> {\r\n//     return (\r\n//       <div className=\"Customer\">\r\n//         <div className=\"customerName\">{this.props.Customer.name}</div>\r\n//         <div className=\"actionButtons\">\r\n//           <a onClick={this.handleClick}>View Calls</a>\r\n//         </div>\r\n//         {this.Data()}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import MaterialTable from \"material-table\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport * as React from \"react\";\r\nimport styles from \"./Component.module.scss\";\r\nimport { Customer, Status, Call, Stats, Application } from \"./objects\";\r\nimport { services } from \"./services\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\nexport interface ITableComponentProps { \r\n  Customer: Customer;\r\n  data?: any;\r\n  \r\n}\r\n\r\n\r\n\r\nexport const StatsTableComponent: React.FunctionComponent<ITableComponentProps> = (props: React.PropsWithChildren<ITableComponentProps>) => {\r\n  //const services = new services();\r\n\r\n  const [data, setData] = React.useState([]);\r\n\r\n  const useToggle = (initialState:any) => {\r\n    const [isToggled, setIsToggled] = React.useState(initialState);\r\n\r\n    // put [setIsToggled] into the useCallback's dependencies array\r\n    // this value never changes so the callback is not going to be ever re-created\r\n    const toggle = React.useCallback(() => setIsToggled((state:any) => !state), [\r\n      setIsToggled,\r\n    ]);\r\n\r\n    return [isToggled, toggle];\r\n  };\r\n  const [showData, setshowData] = useToggle(false);\r\n  //const presence = props.person.presence;\r\n\r\n  \r\n  const AddDataRow = async (newData:any) =>{\r\n\r\n    console.log(\"Adding\",newData);\r\n\r\n\r\n  }\r\n\r\n  const UpdateDataRow= async (newData:any) =>{\r\n\r\n    console.log(\"Updating\",newData)\r\n  }\r\n\r\n  const DeleteDataRow= async (newData:any) =>{\r\n\r\n    console.log(\"Updating\",newData)\r\n\r\n  }\r\n\r\n\r\n\r\n   const loadData = async () =>{\r\n    \r\n    await new services()\r\n      .getCustomerStats(props.Customer.id)\r\n      .then((response:any) => {\r\n        console.log(\"ðŸš€ ~ response\", response);\r\n\r\n          let element =response;\r\n       \r\n        let dataSet: any = [];\r\n\r\n       \r\n          dataSet.push({\r\n            id: element.id,\r\n            openCallsTotal: element.openCalls.totalCalls,\r\n            openCallsresponded: element.openCalls.responded,\r\n            openCallsawaitingResponse: element.openCalls.awaitingResponse,\r\n            closedCallsTotal: element.closedCalls.totalCalls,\r\n            closedCallssatisfactory: element.closedCalls.satisfactory,\r\n            closedCallsunsatisfactory: element.closedCalls.unsatisfactory,\r\n            month1: element.lastThreeMonths.month1,\r\n            month2: element.lastThreeMonths.month2,\r\n            month3: element.lastThreeMonths.month3,\r\n            \r\n          });\r\n       \r\n\r\n        setData(dataSet);\r\n        setshowData();\r\n      });\r\n  }\r\n\r\nuseEffect(() => {\r\n  \r\n  if(!showData)\r\n  loadData();\r\n\r\n},[showData]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n  {}\r\n        <div className={\"Tablehost\"}>\r\n          <MaterialTable\r\n            title={props.Customer.name + \" - Statistics\"}\r\n            //icons={tableIcons}\r\n            options={{\r\n               // paging:false,\r\n                pageSize: 1,\r\n\r\n            }}\r\n            columns={[\r\n             // { title: \"Call Id\", field: \"id\" },\r\n              { title: \"Open - Total\", field: \"openCallsTotal\" },\r\n              { title: \"Open - Responded\", field: \"openCallsresponded\" },\r\n              { title: \"Open - Awaiting Response\", field: \"openCallsawaitingResponse\" },\r\n              \r\n              { title: \"Closed - Total\", field: \"closedCallsTotal\" },\r\n              { title: \"Closed - Satisfactory\", field: \"closedCallssatisfactory\" },\r\n              { title: \"Closed - Unsatisfactory\", field: \"closedCallsunsatisfactory\" },\r\n              \r\n              { title: \"Month1\", field: \"month1\" },\r\n              { title: \"Month2\", field: \"month2\" },\r\n              { title: \"Month3\", field: \"month3\" },\r\n\r\n            \r\n            ]}\r\n            data=\r\n            {data}\r\n            // {[\r\n            //   {\r\n            //     status: \"Mehmet\",\r\n            //     application: \"Baran\",\r\n            //     description: 1987,\r\n            //     birthCity: 63,\r\n            //   },\r\n            //   {\r\n            //     name: \"Zerya BetÃ¼l\",\r\n            //     surname: \"Baran\",\r\n            //     birthYear: 2017,\r\n            //     birthCity: 34,\r\n            //   },\r\n            // ]}\r\n            // actions={[\r\n\r\n            //   {\r\n            //     icon: 'edit',\r\n            //     tooltip: 'update status',\r\n            //     onClick: (event, rowData) => \r\n            //     new Promise((resolve, reject) => {\r\n            //           setTimeout(() => {\r\n            //             //const dataUpdate = [...data];\r\n            //             //const index = oldData.tableData.id;\r\n            //             //dataUpdate[index] = newData;\r\n            //             //setData([...dataUpdate]);\r\n            //             UpdateDataRow(rowData)\r\n    \r\n            //             resolve(true);\r\n            //           }, 1000);\r\n            //         }),\r\n                \r\n                \r\n            //   },\r\n\r\n            // ]}\r\n            // editable={{\r\n            //   // onRowAdd: (newData) =>\r\n            //   //   new Promise((resolve, reject) => {\r\n            //   //     setTimeout(() => {\r\n            //   //        setData([...data, newData]);\r\n            //   //        AddDataRow(newData);\r\n            //   //        resolve(true);\r\n            //   //     }, 1000);\r\n            //   //   }),\r\n            //   onRowUpdate: (newData, oldData:any) =>\r\n            //     new Promise((resolve, reject) => {\r\n            //       setTimeout(() => {\r\n            //         const dataUpdate = [...data];\r\n            //         const index = oldData.tableData.id;\r\n            //         //dataUpdate[index] = newData;\r\n            //         setData([...dataUpdate]);\r\n            //         UpdateDataRow(newData);\r\n\r\n            //         resolve(true);\r\n            //       }, 1000);\r\n            //     }),\r\n            //   // onRowDelete: (someData) =>\r\n            //   //   new Promise((resolve, reject) => {\r\n            //   //     setTimeout(() => {\r\n            //   //       const dataDelete = [...data];\r\n            //   //       //const index = someData.tableData.id;\r\n            //   //       console.log('ðŸš€ ~ someData', someData);\r\n            //   //       DeleteDataRow(someData);\r\n                    \r\n            //   //       //dataDelete.splice(index, 1);\r\n            //   //       setData([...dataDelete]);\r\n            //   //       resolve(true)\r\n            //   //     }, 1000);\r\n            //   //   }),\r\n            // }}\r\n          />\r\n        </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n// export default class CustomerComponent extends React.Component<\r\n//   ICustomerProps,\r\n//   ICustomerState\r\n// > {\r\n//   private services: services = new services();\r\n\r\n//   constructor(props: ICustomerProps, state: ICustomerState) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       showData: false,\r\n//     };\r\n\r\n//     this.handleClick = this.handleClick.bind(this);\r\n\r\n//     console.log(\"ðŸš€ ~  this.state\", this.state);\r\n//   }\r\n\r\n//   public async handleClick(e: any) {\r\n//     e.preventDefault();\r\n//     console.log(\"The link was clicked.\");\r\n\r\n//     await this.services\r\n//       .getCustomerCalls(this.props.Customer.id)\r\n//       .then((response) => {\r\n//         console.log(\"ðŸš€ ~ response\", response);\r\n\r\n//         let dataSet: any[] = [];\r\n\r\n//         response.forEach((element: any) => {\r\n//           dataSet.push({\r\n//             id: element.id,\r\n//             status: element.status.description,\r\n//             application: element.application.name,\r\n//             description: element.description,\r\n//           });\r\n//         });\r\n\r\n//         this.setState({\r\n//           data: dataSet,\r\n//         });\r\n//         this.setState((prevState) => ({\r\n//           showData: !prevState.showData,\r\n//         }));\r\n//         console.log(\"ðŸš€ ~ this.state\", this.state);\r\n//       });\r\n//   }\r\n\r\n//   Data = (isLoggedIn?: boolean) => {\r\n//     if (this.state.showData) {\r\n//       return (\r\n//         <div className={\"Tablehost\"}>\r\n//           <MaterialTable\r\n//             title={this.props.Customer.name}\r\n//             options={{\r\n//                 paging:false,\r\n//                 pageSize: 10,\r\n\r\n//             }}\r\n//             columns={[\r\n//               { title: \"Call Id\", field: \"id\" },\r\n//               { title: \"Status\", field: \"status\" },\r\n//               { title: \"Application\", field: \"application\" },\r\n//               { title: \"Description\", field: \"description\" },\r\n//             ]}\r\n//             data={this.state.data}\r\n//             // {[\r\n//             //   {\r\n//             //     status: \"Mehmet\",\r\n//             //     application: \"Baran\",\r\n//             //     description: 1987,\r\n//             //     birthCity: 63,\r\n//             //   },\r\n//             //   {\r\n//             //     name: \"Zerya BetÃ¼l\",\r\n//             //     surname: \"Baran\",\r\n//             //     birthYear: 2017,\r\n//             //     birthCity: 34,\r\n//             //   },\r\n//             // ]}\r\n//             editable={{\r\n//               onRowAdd: (newData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     // setData([...data, newData]);\r\n//                     // resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowUpdate: (newData, oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataUpdate = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataUpdate[index] = newData;\r\n//                     //setData([...dataUpdate]);\r\n//                     //resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowDelete: (oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataDelete = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataDelete.splice(index, 1);\r\n//                     //setData([...dataDelete]);\r\n//                     //resolve()\r\n//                   }, 1000);\r\n//                 }),\r\n//             }}\r\n//           />\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   public render(): React.ReactElement<ICustomerProps> {\r\n//     return (\r\n//       <div className=\"Customer\">\r\n//         <div className=\"customerName\">{this.props.Customer.name}</div>\r\n//         <div className=\"actionButtons\">\r\n//           <a onClick={this.handleClick}>View Calls</a>\r\n//         </div>\r\n//         {this.Data()}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import MaterialTable from \"material-table\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport * as React from \"react\";\r\nimport styles from \"./Component.module.scss\";\r\nimport { Customer, Status, Call, Stats, Application } from \"./objects\";\r\nimport { services } from \"./services\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\n\r\nexport interface IAppsComponentProps { \r\n  Customer: Customer;\r\n  data?: any;\r\n  \r\n}\r\n\r\n\r\n\r\nexport const AppsTableComponent: React.FunctionComponent<IAppsComponentProps> = (props: React.PropsWithChildren<IAppsComponentProps>) => {\r\n  //const services = new services();\r\n\r\n  const [data, setData] = React.useState([]);\r\n\r\n  const useToggle = (initialState:any) => {\r\n    const [isToggled, setIsToggled] = React.useState(initialState);\r\n\r\n    // put [setIsToggled] into the useCallback's dependencies array\r\n    // this value never changes so the callback is not going to be ever re-created\r\n    const toggle = React.useCallback(() => setIsToggled((state:any) => !state), [\r\n      setIsToggled,\r\n    ]);\r\n\r\n    return [isToggled, toggle];\r\n  };\r\n  const [showData, setshowData] = useToggle(false);\r\n  //const presence = props.person.presence;\r\n\r\n  \r\n  const AddDataRow = async (newData:any) =>{\r\n\r\n    console.log(\"Adding\",newData);\r\n\r\n\r\n  }\r\n\r\n  const UpdateDataRow= async (newData:any) =>{\r\n\r\n\r\n    let name = newData.name;\r\n    let desc = newData.description;\r\n    let hasSupportContract = newData.hasSupportContract;\r\n    let customerId = props.Customer.id;\r\n    //let id = newData.id;\r\n    //let installationDate = newData.installationDate;\r\n\r\n    await new services()\r\n\r\n    .updateCustomerApps(name,hasSupportContract,desc,customerId)\r\n    .then((response:any) => {\r\n      console.log(\"ðŸš€ ~ response\", response);\r\n    \r\n    })\r\n\r\n    console.log(\"Updating\",newData)\r\n  }\r\n\r\n  const DeleteDataRow= async (newData:any) =>{\r\n\r\n    console.log(\"Updating\",newData)\r\n\r\n  }\r\n\r\n\r\n\r\n   const loadData = async () =>{\r\n    \r\n    await new services()\r\n      .getCustomerApps(props.Customer.id)\r\n      .then((response:any) => {\r\n        console.log(\"ðŸš€ ~ response\", response);\r\n\r\n          \r\n\r\n        \r\n        \r\n        let dataSet: any = [];\r\n        \r\n        response.forEach((element: any) => {\r\n          \r\n          \r\n          var date= new Date(element.installationDate).toLocaleDateString(); \r\n\r\n          dataSet.push({\r\n            id: element.id,\r\n            name: element.name,\r\n            hasSupportContract: element.hasSupportContract,\r\n            installationDate: date,\r\n            description: element.description,\r\n            \r\n            \r\n          });\r\n        });\r\n\r\n        setData(dataSet);\r\n        setshowData();\r\n      });\r\n  }\r\n\r\nuseEffect(() => {\r\n  \r\n  if(!showData)\r\n  loadData();\r\n\r\n},[showData]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n  {}\r\n        <div className={\"Tablehost\"}>\r\n          <MaterialTable\r\n            title={props.Customer.name + \" - Applications\"}\r\n            //icons={tableIcons}\r\n            options={{\r\n               // paging:false,\r\n                pageSize: 5,\r\n\r\n            }}\r\n            columns={[\r\n             // { title: \"Call Id\", field: \"id\" },\r\n              { title: \"Application\", field: \"name\" },\r\n              { title: \"Support Contract?\", field: \"hasSupportContract\" },\r\n              { title: \"Installation Date\", field: \"installationDate\" },\r\n              \r\n              { title: \"Application Type\", field: \"description\" },\r\n              // { title: \"Closed - Satisfactory\", field: \"closedCallssatisfactory\" },\r\n              // { title: \"Closed - Unsatisfactory\", field: \"closedCallsunsatisfactory\" },\r\n              \r\n              // { title: \"Month1\", field: \"month1\" },\r\n              // { title: \"Month2\", field: \"month2\" },\r\n              // { title: \"Month3\", field: \"month3\" },\r\n\r\n            \r\n            ]}\r\n            data=\r\n            {data}\r\n            // {[\r\n            //   {\r\n            //     status: \"Mehmet\",\r\n            //     application: \"Baran\",\r\n            //     description: 1987,\r\n            //     birthCity: 63,\r\n            //   },\r\n            //   {\r\n            //     name: \"Zerya BetÃ¼l\",\r\n            //     surname: \"Baran\",\r\n            //     birthYear: 2017,\r\n            //     birthCity: 34,\r\n            //   },\r\n            // ]}\r\n            // actions={[\r\n\r\n            //   {\r\n            //     icon: 'edit',\r\n            //     tooltip: 'update status',\r\n            //     onClick: (event, rowData) => \r\n            //     new Promise((resolve, reject) => {\r\n            //           setTimeout(() => {\r\n            //             //const dataUpdate = [...data];\r\n            //             //const index = oldData.tableData.id;\r\n            //             //dataUpdate[index] = newData;\r\n            //             //setData([...dataUpdate]);\r\n            //             UpdateDataRow(rowData)\r\n    \r\n            //             resolve(true);\r\n            //           }, 1000);\r\n            //         }),\r\n                \r\n                \r\n            //   },\r\n\r\n            // ]}\r\n            editable={{\r\n              onRowAdd: (newData) =>\r\n                new Promise((resolve, reject) => {\r\n                  setTimeout(() => {\r\n                     setData([...data, newData]);\r\n                     AddDataRow(newData);\r\n                     resolve(true);\r\n                  }, 1000);\r\n                }),\r\n              onRowUpdate: (newData, oldData:any) =>\r\n                new Promise((resolve, reject) => {\r\n                  setTimeout(() => {\r\n                    const dataUpdate = [...data];\r\n                    const index = oldData.tableData.id;\r\n                    dataUpdate[index] = newData;\r\n                    setData([...dataUpdate]);\r\n                    UpdateDataRow(newData);\r\n\r\n                    resolve(true);\r\n                  }, 1000);\r\n                }),\r\n            //   // onRowDelete: (someData) =>\r\n            //   //   new Promise((resolve, reject) => {\r\n            //   //     setTimeout(() => {\r\n            //   //       const dataDelete = [...data];\r\n            //   //       //const index = someData.tableData.id;\r\n            //   //       console.log('ðŸš€ ~ someData', someData);\r\n            //   //       DeleteDataRow(someData);\r\n                    \r\n            //   //       //dataDelete.splice(index, 1);\r\n            //   //       setData([...dataDelete]);\r\n            //   //       resolve(true)\r\n            //   //     }, 1000);\r\n            //   //   }),\r\n            }}\r\n          />\r\n        </div>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n// export default class CustomerComponent extends React.Component<\r\n//   ICustomerProps,\r\n//   ICustomerState\r\n// > {\r\n//   private services: services = new services();\r\n\r\n//   constructor(props: ICustomerProps, state: ICustomerState) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       showData: false,\r\n//     };\r\n\r\n//     this.handleClick = this.handleClick.bind(this);\r\n\r\n//     console.log(\"ðŸš€ ~  this.state\", this.state);\r\n//   }\r\n\r\n//   public async handleClick(e: any) {\r\n//     e.preventDefault();\r\n//     console.log(\"The link was clicked.\");\r\n\r\n//     await this.services\r\n//       .getCustomerCalls(this.props.Customer.id)\r\n//       .then((response) => {\r\n//         console.log(\"ðŸš€ ~ response\", response);\r\n\r\n//         let dataSet: any[] = [];\r\n\r\n//         response.forEach((element: any) => {\r\n//           dataSet.push({\r\n//             id: element.id,\r\n//             status: element.status.description,\r\n//             application: element.application.name,\r\n//             description: element.description,\r\n//           });\r\n//         });\r\n\r\n//         this.setState({\r\n//           data: dataSet,\r\n//         });\r\n//         this.setState((prevState) => ({\r\n//           showData: !prevState.showData,\r\n//         }));\r\n//         console.log(\"ðŸš€ ~ this.state\", this.state);\r\n//       });\r\n//   }\r\n\r\n//   Data = (isLoggedIn?: boolean) => {\r\n//     if (this.state.showData) {\r\n//       return (\r\n//         <div className={\"Tablehost\"}>\r\n//           <MaterialTable\r\n//             title={this.props.Customer.name}\r\n//             options={{\r\n//                 paging:false,\r\n//                 pageSize: 10,\r\n\r\n//             }}\r\n//             columns={[\r\n//               { title: \"Call Id\", field: \"id\" },\r\n//               { title: \"Status\", field: \"status\" },\r\n//               { title: \"Application\", field: \"application\" },\r\n//               { title: \"Description\", field: \"description\" },\r\n//             ]}\r\n//             data={this.state.data}\r\n//             // {[\r\n//             //   {\r\n//             //     status: \"Mehmet\",\r\n//             //     application: \"Baran\",\r\n//             //     description: 1987,\r\n//             //     birthCity: 63,\r\n//             //   },\r\n//             //   {\r\n//             //     name: \"Zerya BetÃ¼l\",\r\n//             //     surname: \"Baran\",\r\n//             //     birthYear: 2017,\r\n//             //     birthCity: 34,\r\n//             //   },\r\n//             // ]}\r\n//             editable={{\r\n//               onRowAdd: (newData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     // setData([...data, newData]);\r\n//                     // resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowUpdate: (newData, oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataUpdate = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataUpdate[index] = newData;\r\n//                     //setData([...dataUpdate]);\r\n//                     //resolve();\r\n//                   }, 1000);\r\n//                 }),\r\n//               onRowDelete: (oldData) =>\r\n//                 new Promise((resolve, reject) => {\r\n//                   setTimeout(() => {\r\n//                     //const dataDelete = [...data];\r\n//                     //const index = oldData.tableData.id;\r\n//                     //dataDelete.splice(index, 1);\r\n//                     //setData([...dataDelete]);\r\n//                     //resolve()\r\n//                   }, 1000);\r\n//                 }),\r\n//             }}\r\n//           />\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return;\r\n//     }\r\n//   };\r\n\r\n//   public render(): React.ReactElement<ICustomerProps> {\r\n//     return (\r\n//       <div className=\"Customer\">\r\n//         <div className=\"customerName\">{this.props.Customer.name}</div>\r\n//         <div className=\"actionButtons\">\r\n//           <a onClick={this.handleClick}>View Calls</a>\r\n//         </div>\r\n//         {this.Data()}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n","import MaterialTable from \"material-table\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport * as React from \"react\";\r\nimport styles from \"./Component.module.scss\";\r\nimport { Customer, Status, Call, Stats, Application } from \"./objects\";\r\nimport { services } from \"./services\";\r\nimport { TableComponent } from \"./TableCalls\";\r\nimport { StatsTableComponent } from \"./TableStats\";\r\nimport { AppsTableComponent } from \"./TableApps\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nexport interface ICustomerProps {\r\n  Customer: Customer;\r\n}\r\n\r\nexport interface ICustomerState {\r\n  Customer?: Customer;\r\n  showData: boolean;\r\n  showData2: boolean;\r\n  showData3: boolean;\r\n  data?: any;\r\n}\r\n\r\nexport default class CustomerComponent extends React.Component<\r\n  ICustomerProps,\r\n  ICustomerState\r\n> {\r\n  //private services: services = new services();\r\n\r\n  constructor(props: ICustomerProps, state: ICustomerState) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showData: false,\r\n      showData2: false,\r\n      showData3: false,\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleClick2 = this.handleClick2.bind(this);\r\n    this.handleClick3 = this.handleClick3.bind(this);\r\n\r\n   // console.log(\"ðŸš€ ~  this.state\", this.state);\r\n  }\r\n\r\n  public async handleClick(e: any) {\r\n    e.preventDefault();\r\n    console.log(\"The link was clicked.\");\r\n\r\n   \r\n        this.setState((prevState) => ({\r\n          showData: !prevState.showData,\r\n          showData2:false,\r\n          showData3:false,\r\n        }));\r\n        console.log(\"ðŸš€ ~ this.state\", this.state);\r\n      //});\r\n  }\r\n  public async handleClick2(e: any) {\r\n    e.preventDefault();\r\n    console.log(\"link 2 was clicked.\");\r\n\r\n   \r\n        this.setState((prevState) => ({\r\n          showData2: !prevState.showData2,\r\n          showData:false,\r\n          showData3:false\r\n        }));\r\n        console.log(\"ðŸš€ ~ this.state\", this.state);\r\n      //});\r\n  }\r\n  public async handleClick3(e: any) {\r\n    e.preventDefault();\r\n    console.log(\"link 3 was clicked.\");\r\n\r\n   \r\n        this.setState((prevState) => ({\r\n          showData3: !prevState.showData3,\r\n          showData2:false,\r\n          showData:false,\r\n        }));\r\n        console.log(\"ðŸš€ ~ this.state\", this.state);\r\n      //});\r\n  }\r\n\r\n  public render(): React.ReactElement<ICustomerProps> {\r\n    return (\r\n      <div className=\"Customer\">\r\n        <div className=\"customerName\">\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n        {this.props.Customer.name}\r\n        </Typography>\r\n        </div>\r\n        <div className=\"actionButtons\">\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>{!this.state.showData ? \"View Calls\" : \"Hide Calls\"}</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick2}>{!this.state.showData2 ? \"View Stats\" : \"Hide Stats\"}</Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleClick3}>{!this.state.showData3 ? \"View Apps\" : \"Hide Apps\"}</Button>\r\n        </div>\r\n        {/* {this.Data()} */}\r\n        {this.state.showData==true ? (\r\n\r\n          <TableComponent\r\n          Customer={this.props.Customer}\r\n          \r\n          ></TableComponent>\r\n          ):(\r\n            <div></div>\r\n          )\r\n        \r\n        }\r\n        {this.state.showData2==true ? (\r\n\r\n          <StatsTableComponent\r\n          Customer={this.props.Customer}\r\n\r\n          ></StatsTableComponent>\r\n          ):(\r\n            <div></div>\r\n          )\r\n\r\n          }\r\n\r\n          {this.state.showData3==true ? (\r\n\r\n          <AppsTableComponent\r\n          Customer={this.props.Customer}\r\n\r\n          ></AppsTableComponent>\r\n          ):(\r\n            <div></div>\r\n          )\r\n\r\n          }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Customer, Status, Call, Stats, Application } from \"./objects\";\n\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\n\nimport { services } from \"./services\";\nimport CustomerComponent from \"./customer\";\n\nexport interface appstate {\n  Customers: Customer[];\n\n  Calls: Call[];\n}\n\nexport default class App extends Component {\n  private services: services = new services();\n\n  state = {\n    Customers: [],\n  };\n\n  async componentDidMount() {\n    await this.services.getAllCustomers().then((data) => {\n      console.log(\"ðŸš€ ~ data\", data);\n\n      this.setState({ Customers: data });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.Customers ? (\n          this.state.Customers.map((item, index) => {\n            console.log(\"ðŸš€ ~ item\", item);\n\n            let name;\n            if (item) {\n              name = item[\"name\"];\n            } else {\n              name = null;\n            }\n\n            return (\n              <div>\n                {/* <div>{name}</div> */}\n\n                <CustomerComponent\n                  Customer={item}\n                ></CustomerComponent>\n              </div>\n            );\n          })\n        ) : (\n          <div></div>\n        )}\n\n        {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n"],"sourceRoot":""}